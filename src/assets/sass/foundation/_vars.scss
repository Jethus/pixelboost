// Variables used across multiple file types
// Basic utility mixins that cause conflicts
// Core design tokens
@use "./functions" as *;
@use "sass:map";
@use "sass:color";
@use "sass:list";
@use "sass:string";
@use "sass:math";

$brand-primary: #f26722;
$brand-secondary: #051f3b;
$acc-yellow: #fec010;
$acc-lightblue: #b9e5fb;
$acc-cream: #fff4e4;
$acc-pink: #fbb9b9;
$acc-mint: #8efab4;
$acc-purple: #e2bdff;
$dark: #000;
$light: #fff;

$type-base-min: 16px;
$type-base-max: 19px;
$type-scale-min: 1.333;
$type-scale-max: 1.414;
$type-steps: "sm", "base", "md", "lg", "xl", "xxl", "xxxl";
$type-base-index: list.index($type-steps, "base");

@mixin fluid-font-sizes {
  @for $i from 1 through length($type-steps) {
    $step: list.nth($type-steps, $i);
    $power: $i - $type-base-index;
    $min: $type-base-min * math.pow($type-scale-min, $power);
    $max: $type-base-max * math.pow($type-scale-max, $power);
    --font-size-#{$step}: #{clamped($min, $max)};
  }
}

/* 60px - 100px top and bottom */
$container-padding: clamp(3.75rem, 7.82vw, 6.25rem) 1rem;

// Content width
$content-width: 80em;

// Border values
$border-dark: 2px solid $dark;

// Mixins for container responsive design
@mixin container-query($size) {
  $query: map.get($breakpoints, $size);

  @supports (container-type: inline-size) {
    @if $query {
      @container (min-width: #{$query}) {
        @content;
      }
    } @else {
      @container (min-width: #{$size}) {
        @content;
      }
    }
  }

  @supports not (container-type: inline-size) {
    @if $query {
      @media only screen and (min-width: #{$query}) {
        @content;
      }
    } @else {
      @media only screen and (min-width: #{$size}) {
        @content;
      }
    }
  }
}

// Headings font
$header-font: "Inter Tight", "Arial", sans-serif;
// Body font
$body-font: "Open Sans", "Arial", sans-serif;

// Font weights
$regular-weight: 400;
$bold-weight: 700;
$black-weight: 900;

$line-height: calc(4px + 2ex + 4px);
// Font adjustments
$line-height-small: 1.2;
$line-height-normal: 1.6;
$letter-spacing-wide: 0.05em;

// .SCSS Fluid Text Scaling
$font-size-min: 16; // px at $viewport-min
$font-size-max: 22; // px at $viewport-max
$font-ratio-min: 1.25; // ratio at smallest
$font-ratio-max: 1.3333; // ratio at largest
$viewport-min: 320; // px for min size
$viewport-max: 1500; // px for max size

@mixin header-style {
  font-family: $header-font;
  line-height: $line-height-small;
  font-weight: $black-weight;
}

@mixin body-style {
  font-family: $body-font;
  line-height: $line-height-normal;
}

@mixin border-style($colour) {
  border: 2px solid $colour;
}

@mixin focus-style($colour) {
  outline: 3px solid $colour;
  outline-offset: 6px;
}

@mixin fluid-type($fl: 0) {
  // Calculate min/max in px for this "fluid level"
  $fluid-min: $font-size-min * math.pow($font-ratio-min, $fl);
  $fluid-max: $font-size-max * math.pow($font-ratio-max, $fl);

  // Growth rate (px per 1px of viewport width)
  $fluid-preferred: math.div(
    ($fluid-max - $fluid-min),
    ($viewport-max - $viewport-min)
  );

  // Convert px -> rem with `math.div(..., 16)` and wrap the tricky part in calc()
  font-size: clamp(
    #{math.div($fluid-min, 16)}rem,
    calc(
      #{math.div($fluid-min, 16)}rem +
        (#{$fluid-preferred} * (100vw - #{$viewport-min}px)) / 16
    ),
    #{math.div($fluid-max, 16)}rem
  );
}

@mixin transition-fast($properties...) {
  $transitions: ();

  @each $prop in $properties {
    $transitions: list.append(
      $transitions,
      string.unquote("#{ $prop } 0.12s ease-in-out"),
      $separator: comma
    );
  }

  transition: $transitions;
}

@mixin transition-slow($properties...) {
  $transitions: ();

  @each $prop in $properties {
    $transitions: list.append(
      $transitions,
      string.unquote("#{ $prop } 0.3s ease"),
      $separator: comma
    );
  }

  transition: $transitions;
}
